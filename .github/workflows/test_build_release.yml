name: Test, build and release

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
    paths-ignore:
      - 'releases/**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ matrix.python-version }}

      # - name: Install poetry
      #   run: pip install poetry

      # - name: Set up cache
      #   uses: actions/cache@v4
      #   with:
      #     path: .venv
      #     key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

      # - name: Install dependencies
      #   run: |
      #     poetry config virtualenvs.in-project true
      #     poetry install --no-root --with dev,test

      # - name: Run style checks
      #   run: |
      #     poetry run mypy .
      #     poetry run isort . --check --diff
      #     poetry run flake8 .
      #     poetry run black . --check --diff

      # - name: Verify OpenAPI spec has been updated
      #   run: |
      #     poetry run python ./tools/extract_openapi.py app.main:app --app-dir . --out openapi_generated.yaml
      #     git diff --exit-code ./openapi/openapi.yaml openapi_generated.yaml

      # - name: Run tests
      #   run: poetry run pytest

  build:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install poetry
        run: pip install poetry

      - name: Install Helm
        uses: azure/setup-helm@v3

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make versions
        run: |
          chmod +x ./tools/version.sh
          ./tools/version.sh "${{ github.sha }}" "${{ secrets.DOCKER_IMAGE_NAME }}"
          APP_VERSION=$(cat "./VERSION")
          DOCKER_IMAGES=$(cat "./DOCKER_IMAGES")
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "DOCKER_IMAGES=$DOCKER_IMAGES" >> $GITHUB_ENV

      # - name: Build and push docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     push: true
      #     tags: ${{ env.DOCKER_IMAGES }}

      - name: Build app package
        run: poetry build --format=sdist

      - name: Create helm chart release
        run: |
          mkdir -p ./dist
          cd ./dist
          helm package ../charts/app

      - name: Create release
        run: gh release create ${{ env.APP_VERSION }} ./dist/*.{tar.gz,tgz}
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          skip_packaging: true
